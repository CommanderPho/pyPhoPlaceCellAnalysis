import os
import sys
from pathlib import Path
from typing import Optional, List, Dict
from contextlib import redirect_stdout

import numpy as np
import pandas as pd
pd.options.mode.chained_assignment = None  # default='warn'

# NeuroPy (Diba Lab Python Repo) Loading
from neuropy.core.session.Formats.BaseDataSessionFormats import DataSessionFormatRegistryHolder
from neuropy.core.session.Formats.Specific.KDibaOldDataSessionFormat import KDibaOldDataSessionFormatRegisteredClass
from neuropy.utils.result_context import IdentifyingContext

from pyphoplacecellanalysis.General.Batch.runBatch import build_batch_task_logger
from pyphoplacecellanalysis.General.Pipeline.NeuropyPipeline import PipelineSavingScheme
from pyphoplacecellanalysis.General.Pipeline.Stages.Loading import saveData, loadData
from pyphoplacecellanalysis.General.Batch.runBatch import run_specific_batch, BatchRun, BatchResultDataframeAccessor, run_diba_batch
from pyphoplacecellanalysis.General.Batch.BatchJobCompletion.BatchCompletionHandler import \
    BatchSessionCompletionHandler, SavingOptions, BatchComputationProcessOptions

## Begin Script Body

script_file_path = os.path.abspath(__file__)
script_file_parent_path = Path(os.path.dirname(script_file_path)).resolve()
log_file_path = script_file_parent_path.joinpath('log_file.log')


curr_session_context = {{ curr_session_context }}
curr_session_basedir = Path(r'{{ curr_session_basedir }}').resolve()

curr_task_logger = build_batch_task_logger(session_context=curr_session_context, file_logging_dir=script_file_parent_path) # create logger , file_logging_dir=
_line_sweep = '=========================='
## REPLACES THE `print` function within this scope
_original_print = print
def new_print(*args, **kwargs):
    # Call both regular print and logger.info
    _original_print(*args, **kwargs)
    curr_task_logger.info(*args)

# Replace the print function within this scope
# _original_print = print
print = new_print # should redefine print too?

new_print(f'{_line_sweep} Script {script_file_path} STARTING {_line_sweep}')
new_print(f'\tsession_context: {curr_session_context}')
new_print(f'\tsession_basedir: {str(curr_session_basedir)}')    
new_print('__________________________________________________________________')

# Whether to output figures:
{% if should_perform_figure_generation_to_file %}
from neuropy.utils.matplotlib_helpers import matplotlib_configuration_update
import pyphoplacecellanalysis.External.pyqtgraph as pg

should_perform_figure_generation_to_file=True
app = pg.mkQApp(f'app_{curr_session_context}')
_restore_previous_matplotlib_settings_callback = matplotlib_configuration_update(is_interactive=False) # , backend='Qt5Agg'

{% else %}
should_perform_figure_generation_to_file=False
{% endif %}

multiprocessing_kwargs = dict(use_multiprocessing=False, num_processes=1)
batch_session_completion_handler_kwargs = dict(
    {% for key, value in batch_session_completion_handler_kwargs | dictsort %}
        {{ key|e }}={{ value|e }},
    {% endfor %}
)

# Override input/output files:
local_computations_override_file = script_file_parent_path.joinpath('loadedSessPickle.pkl').resolve()
global_computation_results_override_file = script_file_parent_path.joinpath('global_computation_results.pkl').resolve()

# Overrides for the output files:
local_computations_override_output_file = script_file_parent_path.joinpath('loadedSessPickle.pkl').resolve()
global_computation_results_override_output_file = script_file_parent_path.joinpath('global_computation_results.pkl').resolve()


force_recompute_override_computations_includelist = {{force_recompute_override_computations_includelist|default('[]')}}
should_force_reload_all = {{should_force_reload_all|default('False')}}
should_freeze_pipeline_updates = {{should_freeze_pipeline_updates|default('False')}}
should_symlink_output_pickles = {{should_symlink_output_pickles|default('False')}}


{% if should_freeze_pipeline_updates %}
## No recomputing at all:
result_handler = BatchSessionCompletionHandler(force_reload_all=False,
                                                session_computations_options=BatchComputationProcessOptions(should_load=True, should_compute=False, should_save=SavingOptions.NEVER, override_file=local_computations_override_file, override_output_file=local_computations_override_output_file),
                                                global_computations_options=BatchComputationProcessOptions(should_load=True, should_compute=False, should_save=SavingOptions.NEVER, override_file=global_computation_results_override_file, override_output_file=global_computation_results_override_output_file),
                                                should_perform_figure_generation_to_file=should_perform_figure_generation_to_file, should_generate_all_plots=True, saving_mode=PipelineSavingScheme.SKIP_SAVING, force_global_recompute=False,
                                                **batch_session_completion_handler_kwargs, **multiprocessing_kwargs)

{% else %}
{% if should_force_reload_all %}
## Forced Reloading:
result_handler = BatchSessionCompletionHandler(force_reload_all=True,
                                                session_computations_options=BatchComputationProcessOptions(should_load=False, should_compute=True, should_save=SavingOptions.ALWAYS, override_file=local_computations_override_file, override_output_file=local_computations_override_output_file),
                                                global_computations_options=BatchComputationProcessOptions(should_load=False, should_compute=True, should_save=SavingOptions.ALWAYS, override_file=global_computation_results_override_file, override_output_file=global_computation_results_override_output_file),
                                                force_recompute_override_computations_includelist=force_recompute_override_computations_includelist,                                                
                                                should_perform_figure_generation_to_file=should_perform_figure_generation_to_file, saving_mode=PipelineSavingScheme.OVERWRITE_IN_PLACE, force_global_recompute=True,
                                                **batch_session_completion_handler_kwargs, **multiprocessing_kwargs)
{% else %}
## Reloading as needed:
result_handler = BatchSessionCompletionHandler(force_reload_all=False,
                                                session_computations_options=BatchComputationProcessOptions(should_load=True, should_compute=True, should_save=SavingOptions.IF_CHANGED, override_file=local_computations_override_file, override_output_file=local_computations_override_output_file),
                                                global_computations_options=BatchComputationProcessOptions(should_load=True, should_compute=True, should_save=SavingOptions.IF_CHANGED, override_file=global_computation_results_override_file, override_output_file=global_computation_results_override_output_file),
                                                should_perform_figure_generation_to_file=should_perform_figure_generation_to_file, should_generate_all_plots=True, saving_mode=PipelineSavingScheme.SKIP_SAVING, force_global_recompute=False,
                                                force_recompute_override_computations_includelist=force_recompute_override_computations_includelist,
                                                **batch_session_completion_handler_kwargs, **multiprocessing_kwargs)
{% endif %}
{% endif %}


with open(log_file_path, 'a') as f:
    with redirect_stdout(f):
        run_status, run_errors, run_outputs = run_specific_batch(global_data_root_parent_path=Path(r'{{ global_data_root_parent_path }}').resolve(),
                                                        curr_session_context=curr_session_context,
                                                        curr_session_basedir=curr_session_basedir,
                                                        force_reload = result_handler.force_reload_all,
                                                        post_run_callback_fn=result_handler.on_complete_success_execution_session,
                                                        fail_on_exception=True,
                                                        saving_mode=result_handler.saving_mode)


        new_print(f'finished run: {run_status}\nerrors: {run_errors}\n') # 'outputs: {run_outputs}'

        new_print(f'\n/* ================================================================================================================== */ \n')
        new_print(f'/* Finished {curr_session_context} __________________________________________________________________________________ */')

        new_print(f'/* script_file_parent_path: {script_file_parent_path} __________________________________________________________________________________ */')
        new_print(f'/* script_file_path: {script_file_path} __________________________________________________________________________________ */')
        new_print(f'/* log_file_path: {log_file_path} __________________________________________________________________________________ */')
        new_print(f'/* session_basedir: {curr_session_basedir} __________________________________________________________________________________ */')
        new_print(f'/* local_computations_override_file: {local_computations_override_file} __________________________________________________________________________________ */')
        new_print(f'/* global_computation_results_override_file: {global_computation_results_override_file} __________________________________________________________________________________ */')
        new_print(f'/* local_computations_override_output_file: {local_computations_override_output_file} __________________________________________________________________________________ */')
        new_print(f'/* global_computation_results_override_output_file: {global_computation_results_override_output_file} __________________________________________________________________________________ */')
        new_print(f'/* should_freeze_pipeline_updates: {should_freeze_pipeline_updates} __________________________________________________________________________________ */')
        new_print(f'/* should_force_reload_all: {should_force_reload_all} __________________________________________________________________________________ */')
        new_print(f'/* should_perform_figure_generation_to_file: {should_perform_figure_generation_to_file} __________________________________________________________________________________ */')
        new_print(f'/* should_symlink_output_pickles: {should_symlink_output_pickles} __________________________________________________________________________________ */')
        new_print(f'/* force_recompute_override_computations_includelist: {force_recompute_override_computations_includelist} __________________________________________________________________________________ */')
        new_print(f'/* batch_session_completion_handler_kwargs: {batch_session_completion_handler_kwargs} __________________________________________________________________________________ */')
        new_print(f'/* run_outputs: {run_outputs} __________________________________________________________________________________ */')
        {# new_print(f'/* batch_session_completion_handler_kwargs: {batch_session_completion_handler_kwargs} __________________________________________________________________________________ */') #}





        new_print(f'\n ALL DONE! \n')
        new_print(f'/* ================================================================================================================== */\n')


        {# should_symlink_output_pickles #}