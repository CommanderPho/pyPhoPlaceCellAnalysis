import os
import sys
from pathlib import Path
from typing import Optional, List, Dict
from contextlib import redirect_stdout

# NeuroPy (Diba Lab Python Repo) Loading
from neuropy.core.session.Formats.BaseDataSessionFormats import DataSessionFormatRegistryHolder
from neuropy.core.session.Formats.Specific.KDibaOldDataSessionFormat import KDibaOldDataSessionFormatRegisteredClass
from neuropy.utils.result_context import IdentifyingContext


from pyphoplacecellanalysis.General.Pipeline.NeuropyPipeline import PipelineSavingScheme
from pyphoplacecellanalysis.General.Pipeline.Stages.Loading import saveData, loadData
from pyphoplacecellanalysis.General.Batch.runBatch import SavingOptions, run_specific_batch, BatchRun, BatchResultDataframeAccessor, run_diba_batch, BatchComputationProcessOptions, BatchSessionCompletionHandler

## Begin Script Body

script_file_path = os.path.abspath(__file__)
script_file_parent_path = Path(os.path.dirname(script_file_path)).resolve()
log_file_path = script_file_parent_path.joinpath('log_file.log')


# Whether to output figures:
{% if should_perform_figure_generation_to_file %}
should_perform_figure_generation_to_file=True
{% else %}
should_perform_figure_generation_to_file=False
{% endif %}


{% if should_force_reload_all %}
# Forced Reloading:
should_force_reload_all = True
print(f'forced reloading...')
result_handler = BatchSessionCompletionHandler(force_reload_all=True,
                    session_computations_options=BatchComputationProcessOptions(should_load=False, should_compute=True, should_save=SavingOptions.ALWAYS),
                    global_computations_options=BatchComputationProcessOptions(should_load=False, should_compute=True, should_save=SavingOptions.ALWAYS),
                    should_perform_figure_generation_to_file=should_perform_figure_generation_to_file, should_generate_all_plots=should_perform_figure_generation_to_file, saving_mode=PipelineSavingScheme.OVERWRITE_IN_PLACE, force_global_recompute=True)
{% else %}
# No Reloading
should_force_reload_all = False
result_handler = BatchSessionCompletionHandler(force_reload_all=False,
                    session_computations_options=BatchComputationProcessOptions(should_load=True, should_compute=True, should_save=SavingOptions.IF_CHANGED),
                    global_computations_options=BatchComputationProcessOptions(should_load=True, should_compute=True, should_save=SavingOptions.IF_CHANGED),
                    should_perform_figure_generation_to_file=should_perform_figure_generation_to_file, should_generate_all_plots=should_perform_figure_generation_to_file, saving_mode=PipelineSavingScheme.SKIP_SAVING, force_global_recompute=False)
{% endif %}

curr_session_context = {{ curr_session_context }}
curr_session_basedir = Path(r'{{ curr_session_basedir }}').resolve()

with open(log_file_path, 'a') as f:
    with redirect_stdout(f):
        run_status, run_errors, run_outputs = run_specific_batch(Path(global_data_root_parent_path=r'{{ global_data_root_parent_path }}'),
                                                        curr_session_context=curr_session_context,
                                                        curr_session_basedir=curr_session_basedir,
                                                        force_reload = result_handler.force_reload_all,
                                                        post_run_callback_fn=result_handler.on_complete_success_execution_session,
                                                        fail_on_exception=True,
                                                        saving_mode=result_handler.saving_mode)


        print(f'finished run: {run_status}\nerrors: {run_errors}\n') # 'outputs: {run_outputs}'

        print(f'\n/* ================================================================================================================== */ \n')
        print(f'/* Finished {curr_session_context} __________________________________________________________________________________ */')

        print(f'/* script_file_parent_path: {script_file_parent_path} __________________________________________________________________________________ */')
        print(f'/* script_file_path: {script_file_path} __________________________________________________________________________________ */')
        print(f'/* log_file_path: {log_file_path} __________________________________________________________________________________ */')
        print(f'/* session_basedir: {curr_session_basedir} __________________________________________________________________________________ */')
        print(f'/* should_force_reload_all: {should_force_reload_all} __________________________________________________________________________________ */')
        print(f'/* should_perform_figure_generation_to_file: {should_perform_figure_generation_to_file} __________________________________________________________________________________ */')
        print(f'\n ALL DONE! \n')
        print(f'/* ================================================================================================================== */\n')
