from pathlib import Path
from typing import Optional, List, Dict

# NeuroPy (Diba Lab Python Repo) Loading
from neuropy.core.session.Formats.BaseDataSessionFormats import DataSessionFormatRegistryHolder
from neuropy.core.session.Formats.Specific.KDibaOldDataSessionFormat import KDibaOldDataSessionFormatRegisteredClass
from neuropy.utils.result_context import IdentifyingContext

from pyphoplacecellanalysis.General.Pipeline.NeuropyPipeline import PipelineSavingScheme
from pyphoplacecellanalysis.General.Pipeline.Stages.Loading import saveData, loadData
from pyphoplacecellanalysis.General.Batch.runBatch import run_specific_batch, BatchRun, BatchResultDataframeAccessor, run_diba_batch, BatchComputationProcessOptions, BatchSessionCompletionHandler

## Begin Script Body

should_force_reload_all = True

# Whether to output figures:
should_perform_figure_generation_to_file=False
# should_perform_figure_generation_to_file=True


if should_force_reload_all:
	# Forced Reloading:
	print(f'forced reloading...')
	result_handler = BatchSessionCompletionHandler(force_reload_all=True,
													session_computations_options=BatchComputationProcessOptions(should_load=False, should_compute=True, should_save=True),
													global_computations_options=BatchComputationProcessOptions(should_load=False, should_compute=True, should_save=True),
													should_perform_figure_generation_to_file=should_perform_figure_generation_to_file, saving_mode=PipelineSavingScheme.OVERWRITE_IN_PLACE, force_global_recompute=True)
else:
	# No Reloading
	result_handler = BatchSessionCompletionHandler(force_reload_all=False,
													session_computations_options=BatchComputationProcessOptions(should_load=True, should_compute=False, should_save=False),
													global_computations_options=BatchComputationProcessOptions(should_load=True, should_compute=False, should_save=False),
													should_perform_figure_generation_to_file=should_perform_figure_generation_to_file, saving_mode=PipelineSavingScheme.SKIP_SAVING, force_global_recompute=False)



run_status, run_errors, run_outputs = run_specific_batch(r'{{ global_data_root_parent_path }}', {{ curr_session_context }}, r'{{ curr_session_basedir }}', post_run_callback_fn=result_handler.on_complete_success_execution_session)

print(f'finished run: {run_status}, errors: {run_errors}, outputs: {run_outputs}')

